import numpy as np
import tensorflow as tf
import tensorflow_probability as tfp
import matplotlib.pyplot as plt

# Define distributions from TensorFlow Probability
tfd = tfp.distributions

# Historical data
data = np.array([
4,1,5,2,1,0,1,1,1,3,13,0,6,1,6,3,3,6,6,0,0,1,0,0,7,4,4,6,6,6,4,5,2,0,6


])

# Validate normal distribution fit
mean_data = np.mean(data)
std_data = np.std(data)
normal_dist = tfd.Normal(loc=mean_data, scale=std_data)

# Plot empirical and normal distribution
x = np.linspace(min(data), max(data), 100)
plt.hist(data, bins=30, density=True, alpha=0.6, color='g')
plt.plot(x, normal_dist.prob(x), label='Normal Distribution', color='r')
plt.xlabel('Data Values')
plt.ylabel('Density')
plt.title('Empirical vs Normal Distribution')
plt.legend()
plt.show()

# If normal distribution doesn't fit well, try alternative distributions
# For example, Poisson distribution for count data
poisson_dist = tfd.Poisson(rate=np.mean(data))

# Define the model using the better fitting distribution
def build_model():
    mu = tf.Variable(np.mean(data), dtype=tf.float32, name='mu')
    sigma = tf.Variable(np.std(data), dtype=tf.float32, name='sigma')
    return tfd.Normal(loc=mu, scale=sigma)  # Change to Poisson if it fits better

# Build the model
model = build_model()

# Generate posterior predictive samples
num_samples = 1000
samples = model.sample(num_samples)

# Define the targets
targets = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5]

# Calculate the probabilities for each target
probabilities = {target: np.mean(samples.numpy() > target) for target in targets}

# Print the probabilities
for target, prob in probabilities.items():
    print(f"Probability of the next number being greater than {target}: {prob:.2f}")

# Plot the histogram of samples and mark the targets
plt.hist(samples.numpy(), bins=30, edgecolor='black')
for target in targets:
    plt.axvline(target, color='red', linestyle='dashed', linewidth=1, label=f'Target: {target}')
plt.xlabel('Predicted Values')
plt.ylabel('Frequency')
plt.title('Histogram of Predicted Values with Targets')
plt.legend()
plt.show()

